<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- MyBatis에게 Mapper 경로를 적어야 한다. -->
<mapper namespace="com.example.first_spring.mapper.EmpMapper">
	
	
	<!-- 문제 0. 급여 1500을 파라미터로 받고 부서가 10, 30에 속하는 사원 중 급여가 1500을 넘는 사원의 이름 및 급여 조회. -->
	<select id="getSalName" resultType="EmpVO">
		SELECT
			ename,
			sal
		FROM emp
		WHERE (deptno = 10 or deptno = 30)
			and
			sal > #{sal}
	</select>
	<!-- 문제 1. emp에서 사수가 없는 사원 조회 -->
	<select id="getNullMgr" resultType="EmpVO">
		SELECT
			ename
		FROM emp
		WHERE mgr is null
	</select>
	<!-- 문제 2. 1987년도를 파리미터로 받고 해당 년도에 입사한 사원 조회 -->
	<select id="getHideDate" resultType="EmpVO">
		SELECT
			ename
		FROM emp
		WHERE date_format(hiredate,'%Y') = #{year}
	</select>
	<!-- 문제 3. 12월를 파라미터로 받고 해당 월에 입사한 사원 중 급여가 가장 많은 사원 조회 -->
	<select id="getHideDatasal" resultType="EmpVO">
		SELECT
			ename,
			max(sal) 
		FROM emp
		WHERE date_format(hiredate,'%m') = #{month}
	</select>
	<!-- 문제 4. MANAGER를 파라미터로 받고 job이 MANAGER 중 입사날짜가 가장 빠른 사원의 이름, 입사날짜, 급여 조회 -->
	<select id="getJobMANAGER" resultType="EmpVO">
		SELECT
			ename,
			min(hiredate) as hiredate,
			sal
		FROM emp
		WHERE job = #{jobName}
	</select>
	<!-- (join 문제)*문제 5. 사원번호 7782를 파라미터로 받고 해당 사원의 모든 정보(부서번호, 부서이름, 부서위치 포함) 조회 -->
	<select id="getEmpnoAllData" resultType="EmpVO">
		SELECT
			*
		FROM emp as e
		Inner JOIN dept as d
		ON e.deptno = d.deptno
		WHERE e.empno = #{empno}
	</select>
	
	<!-- Oracle은 Mybatis Insert할 때 PK문법이 다름(시퀸스를 추가해야 함) -->
	<insert id="insertEmp">
		INSERT INTO emp
		(
			empno,
			ename,
			hiredate,
			deptno,
			job,
			sal
		)
		VALUES
		(
			#{empno},
			#{ename},
			now(),
			#{deptno},
			#{job},
			#{sal}
		)
	</insert>
	
	<delete id="deleteEmp">
		DELETE FROM emp
		WHERE empno = #{empno}
	</delete>
	
	<update id="updateEmp">
		UPDATE emp
		SET
			comm = #{comm}
		WHERE empno = #{empno}
	</update>
	<select id="selectEmpWhereJobAndSal" resultType="EmpVO">
		SELECT
			empno,
			ename,
			job,
			comm
		FROM emp
		WHERE 
			job = #{job}
		AND
			sal >= #{sal}
	</select>
	
	<!--1.Integer,String , EmpVO  -->
	<select id="selectDept" resultType="EmpVO">
		SELECT
			d.deptno 
		FROM 
			emp as e
		RIGHT JOIN 
			dept as d
		ON 
			e.deptno = d.deptno
		WHERE 
			e.EMPNO is null
	</select>
	
	<select id="selectSalDelet" resultType="EmpVO">
		SELECT
			EMPNO,
			SAL,
			ENAME
		FROM 
			emp
		WHERE 
			sal >= 3000
	</select>
	
	<select id="selectFisrtNameA" resultType="EmpVO">
		SELECT
			ENAME
		FROM
			 emp 
		WHERE
			 ename like 'A%'
	</select>
	
	<select id="selectEmpEname" resultType="EmpVO">
		SELECT
			*
		FROM emp
		WHERE ename LIKE CONCAT(#{ename}, '%')
	</select>
	<!--deptno(부서번호)가 20번이고 sal(급여)이 2000초과인 직원 전체 조회 -->
	<select id="selectDeptSalA" resultType="EmpVO">
		SELECT
			*
		FROM 
			emp as e
		INNER JOIN 
			dept as d
		ON 
			e.deptno = d.deptno
		WHERE
			d.deptno = #{deptno}
		AND
			e.sal > #{sal}
	</select>

	<!--	true 가 파라미터로 들어오면 사수가 있는 사원조회
			flase가 파라미터로 들어오면 사수 없는 사원 조회 
			Mybatis는 boolean형이 없기떄문에 문자로 비교해야함.
	-->
	<select id="selectEmpMgr" resultType="EmpVO">
		SELECT
			empno,
			ename,
			mgr
		FROM 
			emp
		WHERE 1=1
		<if test='isMgr.equals("true")'>
			AND	mgr IS NOT NULL
		</if>
		<if test='isMgr.equals("false")'>
			AND	mgr IS NULL
		</if>
	</select>
	<update id="updateJobSal">
		UPDATE emp
			SET
			job = #{job},
			sal = #{sal}
		WHERE empno = #{empno}
	</update>
	
	<select id="selectEmpCommSal" resultType="EmpVO" >
		select 
			empno,
			comm,
			sal
		from
			emp
		where 
			empno = 7844
	</select>
	
	<update id="updateEmpsal">
		UPDATE emp
		SET
			sal = #{sal}
		WHERE empno = #{empno}
	</update>
	
</mapper>
